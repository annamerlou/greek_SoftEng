# Συντήρηση λογισμικού

## Ακρωνύμια

## Εισαγωγή

Οι προσπάθειες για την ανάπτυξη λογισμικού αποφέρουν ένα προϊόν λογισμικού που ικανοποιεί τις απαιτήσεις των χρηστών.  Αναλόγως, το προϊόν λογισμικού πρέπει να αλλάζει ή να εξελίσσεται. Από την στιγμή που μπαίνει σε λειτουργία, ελαττώματα αποκαλύπτονται, το περιβάλλον λειτουργίας αλλάζει και νέες απαιτήσεις χρηστών κάνουν την εμφάνιση τους.  Η φάση συντήρησης του κύκλου ζωής (του λογισμικού) ξεκινάει μετά από την περίοδο εγγύησης ή μετά την παροχή υποστήριξης της εφαρμογής, αλλά οι δραστηριότητες συντήρησης ξεκινούν πολύ νωρίτερα.

Η συντήρηση λογισμικού είναι ένα αναπόσπαστο κομμάτι του κύκλου ζωής. Παρόλα αυτά δεν έχει δεχθεί την ίδια προσοχή με τις υπόλοιπες φάσεις. Ιστορικά, η ανάπτυξη λογισμικού είχε πολύ υψηλότερο κύρος σε σχέση με την συντήρηση στους περισσότερους οργανισμούς. Αυτή η τάση τείνει να αλλάξει στις μέρες μας, με τους περισσότερους οργανισμούς να προσπαθούν να εκμεταλλευτούν στο μέγιστο την επένδυση τους για ανάπτυξη λογισμικού με το να διατηρούν «ζωντανό» το λογισμικό για όσο το δυνατόν περισσότερο. Το παράδειγμα του ανοιχτού λογισμικού έχει εντείνει το ενδιαφέρον για το ζήτημα της συντήρησης λογισμικού που δημιουργήθηκε από άλλους. 

Σε αυτόν τον Οδηγό, η συντήρηση λογισμικού ορίζεται σαν το σύνολο από τις δραστηριότητες που απαιτούνται για να παρέχουν αποδοτική υποστήριξη στο λογισμικό. Αυτές οι δραστηριότητες εκτελούνται τόσο πριν όσο και μετά την παράδοση του λογισμικού. Οι δραστηριότητες πριν την παράδοση του λογισμικού περιλαμβάνουν τον σχεδιασμό των μετά την παράδοση δραστηριοτήτων, την συντηρησιμότητα και τον προσδιορισμό των απαιτούμενων πόρων για τις διαδικασίες μετάβασης. Οι δραστηριότητες μετά την παράδοση περιλαμβάνουν την τροποποίηση, την εκπαίδευση και την εκτέλεση μιας διαδικασίας υποστήριξης ή την σύνδεση με μια υπάρχουσα. 

Το γνωστικό πεδίο Συντήρηση λογισμικού συνδέεται με όλες τις πτυχές της τεχνολογίας λογισμικού. Ως εκ τούτου, αυτή η περιγραφή του γνωστικού πεδίου συνδέεται με όλα υπόλοιπα της τεχνολογίας στον Οδηγό.

 

## Κατανομή των θεμάτων για την συντήρηση λογισμικού 

{id="fig-softmainten-tree"}
![Κατανομή των θεμάτων στο γνωστικό πεδίο Συντήρηση λογισμικού.](images/5-SoftMainten.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία της συντήρηση λογισμικού απεικονίζεται στο [σχετικό υπόδειγμα](#fig-softmainten-tree).
 

## Βασικές αρχές της συντήρησης λογισμικού


Η πρώτη ενότητα εισάγει το πλαίσιο και την ορολογία που αποτελούν την βάση για την κατανόηση του ρόλου και της οπτικής της συντήρησης λογισμικού. Τα επιμέρους θέματα παρέχουν ορισμούς και δίνουν έμφαση στο γιατί η συντήρηση είναι αναγκαία. Οι κατηγορίες της συντήρησης λογισμικού είναι κρίσιμες για την κατανόηση της βαθύτερης σημασίας της.

###  Ορισμοί και ορολογία

Ο σκοπός της συντήρησης λογισμικού ορίζεται στο διεθνές πρότυπο για συντήρηση λογισμικού: ISO/IEC/IEEE 14764. Στο πλαίσιο της τεχνολογίας λογισμικού, η συντήρηση λογισμικού είναι ουσιαστικά μια εκ των πολλών τεχνικών διεργασιών.

Ο στόχος της συντήρησης λογισμικού είναι η τροποποίηση του υπάρχοντος λογισμικού με ταυτόχρονη διατήρηση της ακεραιότητας του. Το διεθνές πρότυπο επίσης επισημαίνει την σημασία των δραστηριοτήτων συντήρησης, που προηγούνται της παράδοσης του λογισμικού ( predelivery activities ). Είναι αξιοσημείωτο το γεγονός ότι το IEEE 14764 δίνει έμφαση στη σημασία των πριν την παράδοση πτυχών της συντήρησης, για παράδειγμα του σχεδιασμού.

###  Η φύση της συντήρησης

Η συντήρηση λογισμικού συντηρεί το προϊόν λογισμικού σε όλη τη διάρκεια του κύκλου ζωής του από την ανάπτυξη έως την λειτουργία του. Τα αιτήματα τροποποίησης καταγράφονται και παρακολουθούνται, προσδιορίζεται η επίδραση των προτεινόμενων αλλαγών, παραμετροποιείται ο κώδικας και τα άλλα αντικείμενα λογισμικού, γίνεται έλεγχος και μια νέα έκδοση του λογισμικού εκδίδεται. Επίσης, παρέχεται στους χρήστες εκπαίδευση και καθημερινή υποστήριξη. Ο όρος συντηρητής ( maintainer ) ορίζεται ως ένας οργανισμός, ο οποίος εκτελεί δραστηριότητες συντήρησης. Σε αυτό το γνωστικό πεδίο ο όρος κάποιες φορές θα αναφέρεται σε άτομα που εκτελούν αυτές τις δραστηριότητες, αντιπαραβάλλοντας τους με τους προγραμματιστές.

Το IEEE 14764 διακρίνει τις βασικές δραστηριότητες της συντήρησης λογισμικού ως διεργασία υλοποίησης, ανάλυσης προβλημάτων και τροποποιήσεων, εφαρμογής τροποποιήσεων, επιθεώρησης/αποδοχής συντήρησης, μεταφοράς και απόσυρσης. Αυτές οι δραστηριότητες αναλύονται στην ενότητα 3.2, Δραστηριότητες Συντήρησης.

Οι συντηρητές μπορούν να «μάθουν» από τις γνώσεις των προγραμματιστών για το λογισμικό. Η επαφή με τους προγραμματιστές και η εξαρχής εμπλοκή του συντηρητή βοηθά στο να μειωθεί η συνολική προσπάθεια συντήρησης. Σε ορισμένες περιπτώσεις, ο αρχικός προγραμματιστής δεν μπορεί να προσεγγιστεί ή ασχολείται με άλλες δραστηριότητες, γεγονός που δημιουργεί επιπλέον πρόκληση στο έργο των συντηρητών. Η συντήρηση πρέπει να παίρνει τα στοιχεία λογισμικού από την ανάπτυξη (για παράδειγμα κώδικα ή τεκμηρίωση) και να τα υποστηρίζει άμεσα, έπειτα να τα εξελίσσει/διατηρεί σταδιακά καθ' όλο τον κύκλο ζωής του λογισμικού. 

###  Ανάγκη για συντήρηση


Η συντήρηση είναι απαραίτητη για να διασφαλίζεται ότι το λογισμικό συνεχίζει να ικανοποιεί τις απαιτήσεις του χρήστη. Η συντήρηση εφαρμόζεται σε λογισμικό, το οποίο αναπτύσσεται με την χρήση οποιουδήποτε μοντέλου κύκλου ζωής λογισμικού (για παράδειγμα σπειροειδούς ή γραμμικού). Τα προϊόντα λογισμικού αλλάζουν λόγω διορθωτικών και μη διορθωτικών δράσεων. Η συντήρηση πρέπει να πραγματοποιείται ώστε να επιτυγχάνεται: 

  * η διόρθωση λαθών
  * η βελτίωση του σχεδιασμού
  * η εφαρμογή ενισχύσεων
  * η αλληλεπίδραση με άλλο λογισμικό
  * η υιοθέτηση προγραμμάτων ώστε να μπορούν να χρησιμοποιούνται διαφορετικό υλικό, λογισμικό, στοιχεία συστημάτων και τηλεπικοινωνιακές εγκαταστάσεις
  * η μεταφορά από προηγούμενο λογισμικό
  * η απόσυρση λογισμικού.

Οι δραστηριότητες του συντηρητή αποτελούνται από πέντε βασικά χαρακτηριστικά:

  * η διατήρηση του ελέγχου επί των καθημερινών λειτουργιών του λογισμικού
  * η διατήρηση του ελέγχου επί της τροποποίησης του λογισμικού
  * η βελτιστοποίηση των υπαρχόντων λειτουργιών
  * ο προσδιορισμός απειλών ασφάλειας και η διόρθωση τρωτών σημείων στην ασφάλεια
  * η πρόληψη ώστε η επίδοση του συστήματος να μη πέφτει σε επίπεδο κάτω του επιτρεπτού.

### Η πλειοψηφία του κόστους συντήρησης

Η συντήρηση καταναλώνει ένα μεγάλο μερίδιο από τους οικονομικούς πόρους στον κύκλο ζωής του λογισμικού. Μια συχνή αντίληψη για την συντήρηση λογισμικού είναι ότι κυρίως διορθώνει λάθη. Παρόλα αυτά μελέτες και έρευνες τα τελευταία χρόνια έχουν δείξει ότι κατά πλειοψηφία, πάνω από το 80%, η συντήρηση λογισμικού χρησιμοποιείται για μη διορθωτικές δράσεις. Η ομαδοποίηση βελτιώσεων και διορθώσεων στις αναφορές διοίκησης συμβάλλει σε ορισμένες παρανοήσεις για το υψηλό κόστος των διορθώσεων. Η κατανόηση των κατηγοριών της συντήρησης βοηθάει στο να γίνει αντιληπτή η δομή του κόστους της συντήρησης λογισμικού. Επίσης η κατανόηση των παραγόντων που επηρεάζουν την συντηρησιμότητα του λογισμικού μπορεί να βοηθήσει στο να περιοριστεί το κόστος. Κάποιοι περιβαλλοντικοί παράγοντες και η σχέση τους με το κόστος συντήρησης λογισμικού περιλαμβάνουν τα εξής:

  * το λειτουργικό περιβάλλον, που αναφέρεται τόσο στο υλικό όσο και στο λογισμικό
  * το οργανωσιακό περιβάλλον, που αναφέρεται στις πολιτικές, τον ανταγωνισμό, τη διεργασία, το προϊόν και το προσωπικό.

### Η εξέλιξη του λογισμικού

Η συντήρηση λογισμικού σε όρους εξέλιξης αναφέρθηκε για πρώτη φορά στα τέλη της δεκαετίας του 1960. Μετά από μια περίοδο είκοσι ετών η έρευνα οδήγησε στην διατύπωση των πέντε «Νόμων της Εξέλιξης». Ένα από τα πιο σημαντικά ευρήματα ήταν ότι η συντήρηση είναι εξελικτική ανάπτυξη και ότι οι αποφάσεις συντήρησης διευκολύνονται με την κατανόηση του τι συμβαίνει στο λογισμικό με την πάροδο του χρόνου. Ορισμένοι αναφέρουν ότι η συντήρηση είναι συνεχής ανάπτυξη , εκτός του ότι υπάρχει μία επιπλέον είσοδος ή περιορισμός, με άλλα λόγια, ένα υπάρχον μεγάλο λογισμικό δεν είναι ποτέ ολοκληρωμένο και συνεχίζει να εξελίσσεται. Όσο εξελίσσεται γίνεται πιο περίπλοκο εκτός και αν γίνει κάποια δράση για να μειωθεί η πολυπλοκότητα του.  

### Κατηγορίες συντήρησης


Έχουν οριστεί τρείς κατηγορίες/τύποι συντήρησης: διορθωτική ( corrective ), προσαρμοστική ( adaptive ) και βελτιωτική ( perfective ). Το πρότυπο IEEE 14764 περιλαμβάνει και μια τέταρτη, την προληπτική ( preventive ).

  * Διορθωτική συντήρηση: η διαδραστική τροποποίηση ή διόρθωση ενός προϊόντος λογισμικού, που εκτελείται μετά την παράδοση με σκοπό να διορθώσει προβλήματα που εντοπίστηκαν. Σε αυτή την κατηγορία περιλαμβάνεται η έκτακτη συντήρηση, μια μη προγραμματισμένη τροποποίηση, που εκτελείται για να διατηρήσει λειτουργικό το προϊόν λογισμικού κατά τη διάρκεια της διορθωτικής συντήρησης.
  * Προσαρμοστική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού, που εκτελείται μετά την παράδοση του με σκοπό να το διατηρήσει λειτουργικό σε περιβάλλον που μεταβάλλεται ή έχει μεταβληθεί. Για παράδειγμα, μπορεί κάποιες αλλαγές να είναι απαραίτητες για κάποιο λογισμικό λόγω αναβάθμισης του λειτουργικού συστήματος στο οποίο λειτουργεί.
  * Βελτιωτική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού μετά την παράδοση του με σκοπό να παρέχει βελτιώσεις στους χρήστες, βελτιώσεις στην τεκμηρίωση του και βελτίωση του κώδικα ώστε να βελτιωθούν οι επιδόσεις, συντηρησιμότητα ή άλλα χαρακτηριστικά λογισμικού. 
  * Προληπτική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού μετά την παράδοση του, ώστε να εντοπιστούν και να διορθωθούν κρυμμένα λάθη προτού γίνουν λειτουργικά λάθη.

Το πρότυπο IEEE 14764 κατηγοριοποιεί την προσαρμοστική και την προληπτική συντήρηση ως συντήρηση ενισχύσεων ( maintenance enhancements ). Επίσης ομαδοποιεί την διορθωτική και προληπτική συντήρηση σε μία κατηγορία διόρθωσης ( correction category ), όπως φαίνεται στον Πίνακα 5.1.

## Βασικά ζητήματα συντήρησης λογισμικού

Ένα σύνολο ζητημάτων πρέπει να διαχειριστούν, ώστε η συντήρηση λογισμικού να είναι αποτελεσματική. Η συντήρηση λογισμικού αναδεικνύει ιδιαίτερες προκλήσεις, τεχνικές και διοικητικές, για τους μηχανικούς λογισμικού, για παράδειγμα να προσπαθούν να βρουν το λάθος σε πολλές γραμμές κώδικα που έχει συγγραφεί από έναν άλλο μηχανικό λογισμικού. Ομοίως, η διαχείριση των πόρων είναι μια συνεχής μάχη για τους προγραμματιστές. Ο σχεδιασμός μιας μελλοντικής έκδοσης, που συχνά συμπίπτει με την εφαρμογή έκτακτων διορθώσεων για την τωρινή, μπορεί επίσης να αποβεί μια πρόκληση. Η ενότητα που ακολουθεί παρουσιάζει κάποια από τα τεχνικά και τα διοικητικά ζητήματα, που σχετίζονται με την συντήρηση λογισμικού. Έχουν ομαδοποιηθεί βάσει των παρακάτω τίτλων θεμάτων:

  * Τεχνικά ζητήματα
  * Διοικητικά ζητήματα
  * Εκτίμηση κόστους
  * Μετρικές

### Τεχνικά ζητήματα

### Περιορισμένη κατανόηση

Η περιορισμένη κατανόηση αναφέρεται στο πόσο γρήγορα ένας μηχανικός λογισμικού μπορεί να καταλάβει που να κάνει αλλαγή ή διόρθωση σε ένα λογισμικό που δεν έχει αναπτύξει ο ίδιος. Έρευνες δείχνουν ότι τουλάχιστον η μισή από την συνολική προσπάθεια που καταβάλλεται για την συντήρηση λογισμικού, δαπανάται στην κατανόηση του. Επομένως το θέμα της κατανόησης λογισμικού φέρει μεγάλο ενδιαφέρον για τους μηχανικούς λογισμικού. Η κατανόηση είναι πιο δύσκολή σε μια απεικόνιση μέσω κειμένου, όπως είναι ένας πηγαίος κώδικας, όπου είναι συχνά δύσκολο να παρακολουθήσεις την εξέλιξη του λογισμικού μέσα από τις διάφορες  εκδόσεις, αν οι αλλαγές δεν έχουν τεκμηριωθεί και αν οι προγραμματιστές δεν είναι διαθέσιμοι για να τις εξηγήσουν, κάτι που συμβαίνει αρκετά συχνά. Ως εκ τούτου, οι μηχανικοί λογισμικού αρχικά κατανοούν εν μέρει μόνο το λογισμικό. Πρέπει επομένως να γίνουν πολλά για τον περιορισμό του φαινομένου αυτού από τους μηχανικούς λογισμικού.

### Έλεγχος

Το κόστος, σε όρους χρήματος και χρόνου,  του επαναληπτικού ελέγχου σε μεγάλο μέρος του λογισμικό είναι αρκετά σημαντικό. Ο συντηρητής πρέπει να αναπαράγει και να επαληθεύει τα προβλήματα τρέχοντας τις κατάλληλες δοκιμές, ώστε να διασφαλίσει ότι οι αναφορές προβλημάτων είναι έγκυρες. Ο έλεγχος παλινδρόμησης (η επιλεκτική δοκιμή του λογισμικού ή τμήματος του για να επαληθευτεί ότι οι τροποποιήσεις δεν έχουν απρόβλεπτα αποτελέσματα) είναι μια πολύ σημαντική έννοια για την συντήρηση. Επιπλέον, η εύρεση χρόνου για έλεγχο είναι συχνά δύσκολη. Όταν διαφορετικά μέλη της ομάδας συντήρησης δουλεύουν πάνω σε διαφορετικά προβλήματα, ο συντονισμός μιας δοκιμής αποτελεί μια πρόκληση. Όταν το λογισμικό εκτελεί κρίσιμες λειτουργίες, μπορεί να είναι δύσκολο να αποσυνδεθεί από αυτές για να τρέξει σε δοκιμές. Οι δοκιμές δεν μπορούν να εκτελούνται στο πιο σημαντικό σημείο, δηλαδή το σύστημα παραγωγής. Το γνωστικό πεδίο Έλεγχος λογισμικού παρέχει επιπλέον πληροφορίες και αναφορές γι' αυτό το θέμα στην υποκατηγορία του Έλεγχος Παλινδρόμησης.

### Ανάλυση επίδρασης

Η ανάλυση επίδρασης περιγράφει την αποδοτική διεξαγωγή μιας ολοκληρωμένης ανάλυσης για την επίδραση της αλλαγής στο υπάρχον λογισμικό. Οι συντηρητές πρέπει να επεξεργαστούν μια ενδόμυχη γνώση για την δομή και το περιεχόμενο του λογισμικού. Χρησιμοποιούν αυτή τη πληροφορία για να εκτελέσουν την ανάλυση επίδρασης, που εντοπίζει όλα τα συστήματα και τα προϊόντα λογισμικού, που επηρεάζονται από την αίτηση αλλαγής λογισμικού και παρουσιάζει μια εκτίμηση για τους απαιτούμενους πόρους για την επίτευξη αυτής της αλλαγής. Επομένως, καθορίζεται ο κίνδυνος της υλοποίησης της αλλαγής. Το αίτημα αλλαγής, που μερικές φορές αναφέρεται ως Αίτημα τροποποίησης και συχνά ως Αναφορά προβλήματος, πρέπει αρχικά να αναλυθεί και να μεταφραστεί σε όρους λογισμικού. Η ανάλυση επίδρασης πραγματοποιείται αφού το αίτημα αλλαγής μπει στη διαδικασία διαχείρισης σχηματισμών λογισμικού. Το IEEE 14764 αναφέρει τις εργασίες για την ανάλυση επίδρασης:

  * η ανάλυση Αιτήματος τροποποίησης/Αναφοράς προβλήματος
  * η αναπαραγωγή και επαλήθευση προβλήματος 
  * η ανάπτυξη επιλογών για την εφαρμογή της τροποποίησης
  * η τεκμηρίωση του Αιτήματος τροποποίησης/Αναφοράς προβλήματος, των αποτελεσμάτων και των επιλογών εκτέλεσης
  * η απόκτηση έγκρισης για την επιλογή τροποποίησης

Η σοβαρότητα ενός προβλήματος χρησιμοποιείται συχνά για να αποφασιστεί το πώς και πότε θα διορθωθεί. Έπειτα ο μηχανικός λογισμικού εντοπίζει ποια εξαρτήματα του λογισμικού επηρεάζονται. Παρέχονται πιθανές λύσεις συνοδευόμενες από μια πρόταση για το καλύτερο σχέδιο δράσης.

Το λογισμικό που έχει σχεδιαστεί λαμβάνοντας υπόψη την δυνατότητα συντήρησης διευκολύνει κατά πολύ την ανάλυση επίδρασης. Περισσότερες πληροφορίες μπορούν να βρεθούν στο γνωστικό πεδίο Διαχείριση σχηματισμών λογισμικού. 

### Συντηρησιμότητα

Το IEEE 14764 ορίζει την συντηρησιμότητα ως την ικανότητα του προϊόντος λογισμικού να τροποποιείται. Τροποποιήσεις μπορεί να περιλαμβάνουν διορθώσεις, βελτιώσεις ή προσαρμογές του λογισμικού στις αλλαγές του περιβάλλοντος καθώς και σε αλλαγές στις προδιαγραφές απαιτήσεων και στις λειτουργικές προδιαγραφές.

Ως κύριο χαρακτηριστικό της ποιότητας του λογισμικού, η συντηρησιμότητα πρέπει να έχει προσδιοριστεί, αξιολογηθεί και ελεγχθεί στη διάρκεια της ανάπτυξης του λογισμικού ώστε να μειωθεί το κόστος συντήρησης. Όταν αυτό συμβαίνει επιτυχώς, η συντηρησιμότητα του λογισμικού θα βελτιωθεί. Η συντηρησιμότητα είναι συχνά δύσκολο να επιτευχθεί γιατί τα χαρακτηριστικά της δεν λαμβάνονται συχνά υπόψη στην διαδικασία ανάπτυξης. Οι προγραμματιστές είναι συνήθως απορροφημένοι σε πολλές άλλες δραστηριότητες και τείνουν να αγνοούν τις απαιτήσεις του συντηρητή. Αυτό μπορεί, και συμβαίνει συχνά, να έχει ως αποτέλεσμα την έλλειψη τεκμηρίωσης και περιβαλλόντων ελέγχου για το λογισμικό, που είναι κάποιοι από τους κύριους λόγους για την δυσκολία κατανόησης του προγράμματος και την ανεπαρκή ανάλυση επίδρασης. Η παρουσία συστηματικών και ώριμων διαδικασιών, τεχνικών και εργαλείων βοηθάει στην βελτίωση της συντηρησιμότητας του λογισμικού.

### Διοικητικά ζητήματα


### Ευθυγράμμιση με τους οργανωσιακούς στόχους

Οι οργανωσιακοί στόχοι περιγράφουν το πώς η συντήρηση λογισμικού είναι μια επικερδής επένδυση. Η αρχική ανάπτυξη λογισμικού είναι συνήθως βασισμένη σε έργα ( project ) με καθορισμένο χρόνο και κόστος. Ο κύριος στόχος είναι η παράδοση ενός προϊόντος που ανταποκρίνεται στις ανάγκες των χρηστών και στην ώρα του και χωρίς επιπλέον κόστος. Αντίθετα, η συντήρηση λογισμικού έχει συχνά ως στόχο την παράταση της ζωής του λογισμικού για όσο το δυνατόν περισσότερο. Μπορεί επίσης να εκτελείται για να ικανοποιήσει τις απαιτήσεις των χρηστών για βελτιώσεις και αναβαθμίσεις λογισμικού. Και στις δύο περιπτώσεις, η απόδοση της ως επένδυση είναι λιγότερο ξεκάθαρη, τόσο που σε ανώτερα επίπεδα διοίκησης θεωρείται μια δραστηριότητα που καταναλώνει αρκετούς πόρους χωρίς μετρήσιμα οφέλη για τον οργανισμό.

### Στελέχωση

Η στελέχωση αναφέρεται στο πώς να προσελκυσθεί και να διατηρηθεί προσωπικό για την συντήρηση λογισμικού. Η συντήρηση συνήθως δεν θεωρείται τόσο «λαμπερή» σαν δουλειά. Ως αποτέλεσμα, το προσωπικό της συντήρησης θεωρείται «δεύτερης κλάσης» και έχει πεσμένο ηθικό.

### Διεργασία

Ο κύκλος ζωής λογισμικού είναι μια σειρά από δραστηριότητες, μεθόδους, πρακτικές και μετατροπές που χρησιμοποιούνται για την ανάπτυξη και την συντήρηση του λογισμικού και των σχετικών προϊόντων. Σε επίπεδο διαδικασίας οι δραστηριότητες συντήρησης λογισμικού μοιράζονται πολλά κοινά με την ανάπτυξη λογισμικού, για παράδειγμα η διαχείριση σχηματισμών λογισμικού είναι σημαντική και για τις δύο. Η συντήρηση απαιτεί  ωστόσο αρκετές δραστηριότητες που δεν εντοπίζονται στην ανάπτυξη λογισμικού (βλ. παράγραφο 3.2, Μοναδικές δραστηριότητες, για περισσότερες λεπτομέρειες στις μοναδικές δραστηριότητες). Αυτές οι δραστηριότητες είναι προκλήσεις για την διοίκηση.

### Οργανωσιακές πτυχές της συντήρησης

Οι οργανωσιακές πτυχές περιγράφουν το πώς μπορεί να εντοπιστεί ποιος οργανισμός ή οργανωσιακή λειτουργία θα είναι υπεύθυνη για τη συντήρηση του λογισμικού. Δεν είναι απαραίτητο ότι η συντήρηση του λογισμικού να ανατεθεί στην ομάδα που το ανέπτυξε.

Οι οργανισμοί τεχνολογίας λογισμικού, για να αποφασίσουν που θα τοποθετηθεί η λειτουργία της συντήρησης λογισμικού, μπορούν να χρησιμοποιήσουν , για παράδειγμα την ομάδα ανάπτυξης λογισμικού ή να χρησιμοποιήσουν μια μόνιμη ομάδα εξειδικευμένη στην συντήρηση (συντηρητές). Η χρησιμοποίηση μιας μόνιμης ομάδας εξειδικευμένης στην συντήρηση έχει πολλά πλεονεκτήματα:

  * επιτρέπει την εξειδίκευση
  * δημιουργεί κανάλια επικοινωνίας
  * προωθεί την αλτρουιστική, συλλογική ατμόσφαιρα
  * περιορίζει την εξάρτηση από συγκεκριμένα άτομα
  * αποτρέπει περιοδικούς ελέγχους

Επειδή υπάρχουν πολλά πλεονεκτήματα και μειονεκτήματα για κάθε επιλογή, η επιλογή διαφέρει από περίπτωση σε περίπτωση. Είναι πολύ σημαντικό για την συντήρηση να τεθεί υπεύθυνο ένα μοναδικό άτομο ή μια ομάδα, ανεξάρτητα από την δομή του οργανισμού.

### Εξωτερική ανάθεση

Η εξωτερική ανάθεση ( outsourcing / offshoring ) της συντήρησης λογισμικού έχει δημιουργήσει μια ξεχωριστή αγορά. Οι οργανισμού αναθέτουν σε τρίτους ολόκληρα έργα λογισμικού, συμπεριλαμβανομένης και της συντήρησης. Η ανάθεση, τις περισσότερες φορές χρησιμοποιείται για λιγότερο κρίσιμο λογισμικό, επειδή οι οργανισμοί δεν θέλουν να χάσουν τον έλεγχο του λογισμικού που χρησιμοποιείται στις βασικές τους λειτουργίες. Μια από τις βασικές προκλήσεις για εκείνους που αναλαμβάνουν την συντήρηση, είναι η διευκρίνηση του εύρους των υπηρεσιών συντήρησης που ζητούνται, τους όρους της συμφωνίας παροχής υπηρεσιών και τις λεπτομέρειες του συμβολαίου. Επίσης ο οργανισμός που αναλαμβάνει την συντήρηση θα πρέπει να επενδύσει σε υποδομές συντήρησης και να παρέχει βοήθεια στους χρήστες στην μητρική τους γλώσσα. Η εξωτερική ανάθεση απαιτεί μια σημαντική αρχική επένδυση και την καθιέρωση μιας διεργασίας συντήρησης που θα απαιτεί αυτοματοποίηση.

### Εκτίμηση κόστους συντήρησης

Οι μηχανικοί λογισμικού πρέπει να κατανοούν τις διάφορες κατηγορίες συντήρησης που αναπτύσσονται παρακάτω, ώστε είναι σε θέση να εκτιμήσουν το κόστος της. Για λόγους σχεδιασμού προγράμματος, εκτίμηση κόστους είναι ένα σημαντικό τμήμα του προγραμματισμού της συντήρησης. 

### Εκτίμηση κόστους

Η παράγραφος 2.3.1 περιγράφει πως η ανάλυση επίδρασης προσδιορίζει όλα τα συστήματα και προϊόντα λογισμικού που επηρεάζονται από ένα αίτημα τροποποίησης λογισμικού και παρουσιάζει μια εκτίμηση των απαιτούμενων πόρων για την εφαρμογή της τροποποίησης αυτής.

Οι εκτιμήσεις για το κόστος συντήρησης επηρεάζονται από πολλούς τεχνικούς και μη τεχνικούς παράγοντες. Το IEEE 14764 αναφέρει ότι «οι δύο πιο διαδεδομένες προσεγγίσεις για την εκτίμηση των πόρων για την συντήρηση λογισμικού είναι η χρήση παραμετρικών μοντέλων και η χρήση της εμπειρίας» . Μπορεί επίσης να χρησιμοποιηθεί ένας συνδυασμός αυτών των δύο.

### Παραμετρικά μοντέλα

Η παραμετρική μοντελοποίηση κόστους (μαθηματική μοντελοποίηση) έχει εφαρμοστεί στην συντήρηση λογισμικού. Σε αυτή τη περίπτωση είναι σημαντικό να χρησιμοποιούνται δεδομένα από το ιστορικό των προηγούμενων συντηρήσεων ώστε να εφαρμόζονται σε αυτά τα διάφορα μαθηματικά μοντέλα. Η διαδικασία αυτή επηρεάζεται από διάφορους παράγοντες που επιδρούν  στο κόστος.

### Εμπειρία

Η εμπειρία, με την έννοια της κρίσης κάποιου ειδικού, χρησιμοποιείται συχνά για να εκτιμηθεί η απαιτούμενη προσπάθεια για τη συντήρηση. Προφανώς είναι προτιμότερος ο συνδυασμός ιστορικών δεδομένων και εμπειρίας ώστε να προκύψει το κόστος διεξαγωγής της συντήρησης (σε ανθρώπινο δυναμικό και χρόνο). Η εκτίμηση των δεδομένων ιστορικού της συντήρησης θα πρέπει να παρέχεται ως αποτέλεσμα ενός προγράμματος μέτρησης.

### Μετρικές συντήρησης λογισμικού

Κάποια από τα αντικείμενα που σχετίζονται με τη συντήρηση λογισμικού και μπορούν να μετρηθούν είναι οι διαδικασίες, οι πόροι και το προϊόν.

Πολλές μετρικές μπορούν να προκύψουν από τα χαρακτηριστικά του λογισμικού, τη διεργασία συντήρησης και το προσωπικό συμπεριλαμβανομένων του μεγέθους, της πολυπλοκότητας, της ποιότητας, της δυνατότητας κατανόησης, της συντηρησιμότητας και της προσπάθειας. Ο βαθμός πολυπλοκότητας του λογισμικού μπορεί να μετρηθεί με την χρήση εργαλείων που υπάρχουν διαθέσιμα στο εμπόριο. Αυτή η μετρική είναι μια καλή πρώτη ένδειξη για το πρόγραμμα μετρήσεων του συντηρητή. Συζητήσεις σχετικά με την μέτρηση των διεργασιών και του προϊόντος λογισμικού παρουσιάζονται στο γνωστικό πεδίο Διεργασίες τεχνολογίας λογισμικού. Επίσης, περιγράφεται το ένα πρόγραμμα συντήρησης λογισμικού.

### Συγκεκριμένες μετρικές

Ο συντηρητής πρέπει να καθορίζει ποιοι δείκτες ταιριάζουν στον κάθε οργανισμό ανάλογα με το περιεχόμενο του. Το μοντέλο ποιότητας λογισμικού προτείνει δείκτες που αφορούν συγκεκριμένα την συντήρηση λογισμικού. Κάποιες μετρικές που αφορούν τα χαρακτηριστικά της συντηρησιμότητας είναι οι εξής:

  * Αναλυσιμότητα: μετρά την προσπάθεια και τους πόρους, που απαιτούνται για την διάγνωση ελαττωμάτων ή παραγόντων αποτυχίας ή τον εντοπισμό των μερών του λογισμικού που χρίζουν τροποποίησης 
  * Δυνατότητα Αλλαγών: μετρά την προσπάθεια του συντηρητή για την εφαρμογή μια συγκεκριμένης αλλαγής 
  * Σταθερότητα: μετρά την απρόβλεπτη συμπεριφορά του λογισμικού, συμπεριλαμβανομένης εκείνης που συνέβη κατά τον έλεγχο 
  * Ελεγξιμότητα: μετρά την προσπάθεια του συντηρητή και των χρήστες για τον έλεγχο του τροποποιημένου λογισμικού 

Άλλες μετρικές που επίσης χρησιμοποιούν οι συντηρητές είναι: 

  * το μέγεθος του λογισμικού 
  * η πολυπλοκότητα του 
  * το πόσο κατανοητό είναι και 
  * η συντηρησιμότητα του 

Η απαιτούμενη προσπάθεια για συντήρηση σε κατηγορίες των διαφόρων εφαρμογών παρέχει επιχειρηματικές πληροφορίες στους χρήστες και τους οργανισμούς. Μπορεί επίσης να δώσει την δυνατότητα στον οργανισμό να συγκρίνει τα διάφορα προφίλ συντήρησης εκ των έσω.

## Διεργασία συντήρησης

Εκτός από τις τυπικές διεργασίες ανάπτυξης λογισμικού και τις δραστηριότητες που περιγράφονται στο πρότυπο IEEE 14764, υπάρχει ένα σύνολο δραστηριοτήτων, που είναι μοναδικές για τους συντηρητές.

### Διεργασίες συντήρησης

Οι διαδικασίες συντήρησης παρέχουν τις απαιτούμενες ενέργειες και τις εισόδους/εξόδους γι' αυτές, όπως περιγράφονται στο IEEE 14764. Οι ενέργειες της διαδικασίας συντήρησης στο IEEE 14764 απεικονίζονται στο Διάγραμμα 5.2. Οι διαδικασίες συντήρησης περιλαμβάνουν τις εξής:

  * εφαρμογή διεργασιών
  * ανάλυση προβλήματος και τροποποίησης 
  * εφαρμογή τροποποίησης 
  * κριτική/αποδοχή συντήρησης 
  * μετάπτωση δεδομένων και 
  * απόσυρση λογισμικού

Σχήμα 5.2 Η διεργασία συντήρησης λογισμικού 

Κάποια άλλα μοντέλα διεργασιών συντήρησης είναι:

  * γρήγορης λύσης 
  * σπειροειδές 
  * Osborne's 
  * επαναληπτικής βελτιστοποίησης και 
  * με στόχο την επαναχρησιμοποίηση 

Πρόσφατα, στην συντήρηση έχουν υιοθετηθεί και ευέλικτες μεθοδολογίες, που προωθούν μικρές διεργασίες. Αυτές οι μεθοδολογίες προέρχονται από την ανάγκη για όσο το δυνατόν γρηγορότερη ολοκλήρωση των διεργασιών συντήρησης. Επίσης εξειδικευμένα μοντέλα για την ωριμότητα της συντηρησιμότητας του λογισμικού παρέχουν βελτιώσεις στην διαδικασία συντήρησης λογισμικού.

### Ενέργειες συντήρησης

Οι διαδικασίες συντήρησης περιέχουν ενέργειες και εργασίες απαραίτητες για την τροποποίηση του υπάρχοντος λογισμικού, ενώ διατηρείται η ακεραιότητα του. Αυτές οι ενέργειες και εργασίες αποτελούν ευθύνη του συντηρητή. Όπως έχει ήδη αναφερθεί, πολλές από τις διεργασίες συντήρησης είναι παρόμοιες με τις διεργασίες ανάπτυξης λογισμικού. Οι συντηρητές εκτελούν ανάλυση, σχεδιασμό, προγραμματισμό, έλεγχο και τεκμηρίωση. Πρέπει να καταγράφουν τις απαιτήσεις για τις δραστηριότητας τους, όπως γίνεται και στην ανάπτυξη, και να ανανεώνουν την τεκμηρίωση βάσει των αλλαγών που εκτελούνται. Το IEEE 14764 προτείνει όταν ένας συντηρητής χρησιμοποιεί μια διεργασία ανάπτυξης, αυτή θα πρέπει να είναι προσαρμοσμένη βάσει συγκεκριμένων αναγκών. Παρόλα αυτά, κάποιες διεργασίες συντήρησης αφορούν αποκλειστικά και μόνο την συντήρηση λογισμικού.

### Μοναδικές δραστηριότητες

Υπάρχει ένα σύνολο από διεργασίες, ενέργειες και πρακτικές που αφορούν αποκλειστικά την συντήρηση λογισμικού:

  * Κατανόηση του προγράμματος: δραστηριότητες που απαιτούνται για την απόκτηση γενικής γνώσης σχετικά με το τι κάνει το λογισμικό και το πως τα διάφορα μέρη του δουλεύουν μαζί 
  * Μετάβαση: μια ελεγχόμενη και συντονισμένη σειρά από ενέργειες κατά την διάρκεια των οποίων το λογισμικό μεταφέρεται προοδευτικά από τον προγραμματιστή στον συντηρητή 
  * Αποδοχή/Απόρριψη αιτημάτων τροποποίησης: τροποποιήσεις που απαιτούν εργασία πέραν ενός συγκεκριμένου μεγέθους/προσπάθειας/πολυπλοκότητας μπορεί να απορριφθούν από τους συντηρητές και να ανατεθούν σε κάποιον προγραμματιστή 
  * Κέντρο υποστήριξης συντήρησης: μια λειτουργία υποστήριξης των τελικών χρηστών που συντονίζει την ανάθεση, την ταξινόμηση και το κόστος των αιτημάτων τροποποίησης 
  * Ανάλυση επιπτώσεων: μια τεχνική για την αναγνώριση περιοχών που επηρεάζονται από μια πιθανή αλλαγή 
  * Συμφωνητικά Παροχής Υπηρεσιών Συντήρησης, άδειες και συμβόλαια συντήρησης (Service-Level Agreement) (SLA) συμβόλαια που περιγράφουν τους στόχους ποιότητας και υπηρεσιών. 

### Υποστηρικτικές διεργασίες

Οι συντηρητές μπορεί επίσης να εκτελούν υποστηρικτικές διαδικασίες όπως η τεκμηρίωση, διαχείριση σχηματισμών λογισμικού, επαλήθευση και επικύρωση, επίλυση προβλημάτων, διασφάλιση ποιότητας λογισμικού, κριτική και έλεγχος. Μια επίσης σημαντική υποστηρικτική ενέργεια είναι η εκπαίδευση συντηρητών και χρηστών.

### Ενέργειες σχεδιασμού συντήρησης

Μια σημαντική ενέργεια για την συντήρηση λογισμικού είναι ο σχεδιασμός και οι συντηρητές πρέπει να αντιμετωπίσουν μια πληθώρα από προβλήματα που συνδέονται με αυτόν όπως:

  * ο επιχειρηματικός σχεδιασμός (οργανωτικό επίπεδο) 
  * ο σχεδιασμός της συντήρησης (επίπεδο μετάβασης) 
  * ο σχεδιασμός των εκδόσεων (επίπεδο λογισμικού) και 
  * ατομικός σχεδιασμός αλλαγών λογισμικού (επίπεδο αιτήματος) 

Στο επίπεδο αιτήματος ο σχεδιασμός γίνεται κατά τη διάρκεια την ανάλυσης επίδρασης (βλ. θέμα 2.1.3, Ανάλυση επίδρασης). Η ενέργεια του σχεδιασμό εκδόσεων απαιτεί από τον συντηρητή:

  * να συλλέγει ημερομηνίες διαθεσιμότητας των ατομικών αιτημάτων 
  * να συμφωνεί με τους χρήστες για το πλαίσιο των εκάστοτε εκδόσεων 
  * να αναγνωρίζει πιθανές διαφωνίες και να αναπτύσσει εναλλακτικές 
  * να αξιολογεί το ρίσκο κάθε νέας έκδοσης και να αναπτύσσει σχέδια εκτάκτου ανάγκης σε περίπτωση που προκύψει κάποιο πρόβλημα και 
  * να ενημερώνει όλα τα ενδιαφερόμενα μέρη. 

Ενώ η ανάπτυξη λογισμικού συνήθως διαρκεί από κάποιους μήνες μέχρι κάποια χρόνια, η συντήρηση συνήθως διαρκεί πολλά χρόνια. Η εκτίμηση των απαιτούμενων πόρων είναι κλειδί για την συντήρηση λογισμικού. Ο προγραμματισμός της συντήρησης λογισμικού πρέπει να ξεκινά με την λήψη της απόφασης για την ανάπτυξη του νέου προϊόντος λογισμικού και να λαμβάνει υπόψη κάποιους στόχους ποιότητας. Πρέπει να αναπτυχθεί ένα έγγραφο, που να περιγράφει το πλαίσιο, καθώς και ένα σχέδιο συντήρησης. Το βασικό πλαίσιο κάθε λογισμικού πρέπει να τεκμηριώνεται στο σχέδιο και πρέπει να αναφέρεται: 

  * στην έκταση της συντήρησης,
  * στη προσαρμογή της διεργασίας συντήρησης
  * στον προσδιορισμό του οργανισμού που θα διεξάγει την συντήρηση και
  * στην εκτίμηση του κόστους συντήρησης.

Το επόμενο βήμα είναι η ανάπτυξη του αντίστοιχου σχεδίου συντήρησης. Το σχέδιο αυτό θα πρέπει να προετοιμάζεται κατά την ανάπτυξη του λογισμικού και να προσδιορίζει το πώς οι χρήστες θα μπορούν να ζητούν αλλαγές στο λογισμικό και θα αναφέρουν προβλήματα. Το IEEE 14764 αναφέρεται και παρέχει οδηγίες για τον σχεδιασμό της συντήρησης. Στο τελευταίο στάδιο στο ανώτερο επίπεδο του σχεδιασμού, ο οργανισμός που αναλαμβάνει τη συντήρηση θα πρέπει να διεξάγει διαδικασίες επιχειρηματικού σχεδιασμού (προϋπολογισμού, χρηματοοικονομικές και ανθρώπινου δυναμικού) όπως γίνεται με όλες τις επιχειρηματικές διαδικασίες. 

### Διαχείριση σχηματισμών λογισμικού

Το IEEE 14764 περιγράφει τη διαχείριση σχηματισμών λογισμικού σαν ένα κρίσιμο στοιχείο της διαδικασίας συντήρησης. Οι διαδικασίες διαχείρισης σχηματισμών λογισμικού πρέπει να προνοούν για την επαλήθευση, την επικύρωση και τον έλεγχο κάθε βήματος που απαιτείται για να αναγνωριστεί, να εγκριθεί, να υλοποιηθεί και να εκδοθεί το προϊόν λογισμικού.

Αποκλειστικά η καταγραφή των αιτημάτων τροποποίησης και αναφορών προβλημάτων δεν αρκεί. Το προϊόν λογισμικού και όσες αλλαγές γίνονται σε αυτό πρέπει να ελέγχονται. Ο έλεγχος αυτός πραγματοποιείται με την εφαρμογή και την επιβολή μιας εγκεκριμένης διαδικασίας Διαχείρισης σχηματισμών λογισμικού (Software Configuration Management) (SCM). Το γνωστικό πεδίο Διαχείρισης σχηματισμών λογισμικού παρέχει λεπτομέρειες για αυτήν και περιγράφει την διεργασία με την οποία τα αιτήματα για αλλαγές στο λογισμικό υποβάλλονται, αξιολογούνται και εγκρίνονται. Η SCM για την συντήρησης λογισμικού διαφέρει από την SCM για την ανάπτυξη λογισμικού στον αριθμό των μικρών αλλαγών που πρέπει να ελεγχθούν σε λογισμικό που ήδη λειτουργεί. Η διεργασία SCM εφαρμόζεται με την ανάπτυξη και την τήρηση ενός σχεδίου διαχείρισης σχηματισμών λογισμικού και λειτουργικών διαδικασιών. Οι συντηρητές συμμετέχουν σε Πίνακες Ελέγχου Σχηματισμών για να καθορίσουν το περιεχόμενο της επόμενης έκδοσης.

### Ποιότητα λογισμικού

Δεν αρκεί απλά να ελπίζουμε ότι η συντήρηση του λογισμικού θα βελτιώσει την ποιότητα του. Οι συντηρητές θα πρέπει να έχουν ένα πρόγραμμα ποιότητας. Το πρόγραμμα ποιότητας πρέπει να έχει σχεδιαστεί και οι διεργασίες του πρέπει να εκτελεστούν για την υποστήριξη της συντήρησης. Οι ενέργειες και οι τεχνικές για την διασφάλιση ποιότητας λογισμικού, την επικύρωση και επαλήθευση, τις αξιολογήσεις και τον έλεγχο πρέπει να επιλέγονται από κοινού με όλες τις άλλες διεργασίες για να εξασφαλίζεται το επιθυμητό επίπεδο ποιότητας. Επίσης προτείνεται ο συντηρητής να υιοθετήσει τις διεργασίες, τις τεχνικές και τα παραδοτέα, που χρησιμοποιήθηκαν για την ανάπτυξη του λογισμικού, και να δοκιμάσει τα αποτελέσματα. Περισσότερες λεπτομέρειες υπάρχουν στο γνωστικό πεδίο Ποιότητα λογισμικού.

## Τεχνικές συντήρησης


Αυτό το θέμα αναφέρει κάποιες ευρέως αποδεκτές τεχνικές συντήρησης λογισμικού.

### Κατανόηση προγράμματος

Οι προγραμματιστές δαπανούν ένα σημαντικό μέρους του χρόνου τους για να διαβάσουν και να καταλάβουν τα προγράμματα ώστε να εφαρμόσουν αλλαγές. Οι φυλλομετρητές κώδικα είναι πολύ σημαντικά εργαλεία για την κατανόηση του προγράμματος και χρησιμοποιούνται για να οργανώσουν και να παρουσιάσουν κώδικα. Ξεκάθαρη και περιεκτική τεκμηρίωση μπορεί επίσης να βοηθήσει στην κατανόηση του προγράμματος.

### Ανασχεδιασμός

Ως ανασχεδιασμός ορίζεται η εξέταση και η τροποποίηση λογισμικού με σκοπό τη ανακατασκευή του σε μια νέα μορφή και περιλαμβάνει την μεταγενέστερη εφαρμογή της νέας μορφής. Συχνά χρησιμοποιείται όχι για να βελτιώσει την συντηρησιμότητα του λογισμικού αλλά για να αντικαταστήσει παλαιό λογισμικό. Η αναπαραγοντοθέτηση είναι τεχνική ανασχεδιασμού που στοχεύει στην αναδιοργάνωση του προγράμματος χωρίς να αλλάζει η συμπεριφορά του. Σκοπεύει στην βελτίωση της δομής του προγράμματος και της συντηρησιμότητας του. Τεχνικές αναπαραγοντοθέτησης μπορούν να χρησιμοποιηθούν κατά την διάρκεια μικρών αλλαγών.

### Αντίστροφη ανάπτυξη

Η αντιστροφή ανάπτυξη είναι η διαδικασία ανάλυσης του λογισμικού για την αναγνώριση των συστατικών του και των μεταξύ τους σχέσεων και την δημιουργία απεικονίσεων άλλης μορφής ή υψηλότερου επιπέδου αφαιρετικότητας. Η αντίστροφη ανάπτυξη είναι παθητική, δεν αλλάζει το λογισμικό ούτε δημιουργεί νέο. Έχει ως στόχο να δημιουργήσει διαγράμματα κλήσεων και ροής ελέγχου από τον πηγαίο κώδικα. Ένας τύπος αντίστροφης ανάπτυξης είναι η ανατεκμηρίωση. Ένας άλλος τύπος είναι η ανάκτηση του σχεδιασμού. Τέλος, τα τελευταία χρόνια το ενδιαφέρον έχει στραφεί στην αντίστροφη ανάπτυξη δεδομένων, όπου λογικά σχήματα/σχέσεις ανακτώνται από φυσικές βάσεις δεδομένων. Τα εργαλεία που θα χρησιμοποιηθούν παίζουν πολύ σημαντικό ρόλο στην αντίστροφη ανάπτυξη καθώς και στις σχετικές εργασίες όπως η ανατεκμηρίωση και η ανάκτηση σχεδιασμού.

### Μετάπτωση

Το λογισμικό, στη διάρκεια της ζωής του, μπορεί να τροποποιηθεί για να τρέξει σε διαφορετικά περιβάλλοντα. Για να μεταφερθεί σε νέο περιβάλλον, ο συντηρητής πρέπει να καθορίσει τις απαιτούμενες ενέργειες, να αναπτύξει και να τεκμηριώσει τα απαιτούμενα βήματα αποτυπώνοντας την μετάπτωση σε ένα σχέδιο μετάπτωσης που περιλαμβάνει τις απαιτήσεις και  τα εργαλεία της μετάπτωσης, τις μετατροπές δεδομένων και προϊόντων, την εκτέλεση, την επαλήθευση και την υποστήριξη. Η μετάπτωση λογισμικού μπορεί επίσης να συνεπάγεται και κάποιες επιπλέον ενέργειες όπως:

  * Ενημέρωση πρόθεσης: μια δήλωση σχετικά το γιατί το παλιό περιβάλλον δεν υποστηρίζεται πλέον, συνοδευόμενη από μια περιγραφή του νέου περιβάλλοντος και της ημερομηνίας διάθεσης του
  * Παράλληλη εργασία: η ταυτόχρονη διάθεση του παλιού και του νέου περιβάλλοντος ώστε οι χρήστες να έχουν μια ομαλή μετάβαση από το παλιό στο νέο περιβάλλον
  * Ενημέρωση ολοκλήρωσης: όταν η μετάπτωση έχει ολοκληρωθεί, όλοι ενδιαφερόμενοι θα πρέπει να ενημερωθούν σχετικά
  * Αναφορά μετά την λειτουργία: μια εκτίμηση της παράλληλης λειτουργίας και της επίδρασης της αλλαγής στο νέο περιβάλλον
  * Αρχειοθέτηση δεδομένων: αποθήκευση των παλαιών δεδομένων του λογισμικού

### Απόσυρση

Όταν το λογισμικό φτάσει στο τέλος του κύκλου ζωής του, πρέπει να αποσυρθεί. Πρέπει να γίνει μια ανάλυση που να υποστηρίζει την απόφαση για απόσυρση. Η ανάλυση αυτή θα πρέπει να συμπεριλαμβάνεται στο σχέδιο απόσυρσης, το οποίο καλύπτει τις απαιτήσεις, την επίδραση, την αντικατάσταση, το πρόγραμμα και την απαιτούμενη προσπάθεια για την απόσυρση του λογισμικού. Μπορεί επίσης να περιλαμβάνεται, η προσβασιμότητα σε αρχειοθετημένα αντίγραφα των δεδομένων. Η απόσυρση λογισμικού συνεπάγεται έναν αριθμό ενεργειών, παρόμοιων με αυτές της μετάπτωσης.

## Εργαλεία συντήρησης λογισμικού

Η ενότητα αυτή περιλαμβάνει εργαλεία που είναι ιδιαιτέρως σημαντικά για την συντήρηση του λογισμικού, όπου υπάρχον λογισμικό τροποποιείται. Κάποια παραδείγματα σχετικά με την κατανόηση περιλαμβάνουν:

  * Κατακερματιστές προγράμματος, που επιλέγουν μόνο τα τμήματα του προγράμματος που επηρεάζονται από μια αλλαγή
  * Στατικούς αναλυτές, που δίνουν τη δυνατότητα γενικής επίβλεψης και σύνοψης του πλαισίου του προγράμματος.
  * Δυναμικούς αναλυτές, που δίνουν στον συντηρητή την δυνατότητα να καταγράφει το μονοπάτι εκτέλεσης του προγράμματος.
  * Αναλυτές ροής δεδομένων, που επιτρέπουν στον συντηρητή να καταγράφει όλες τις δυνατές ροές δεδομένων του προγράμματος
  * Δια-αναφορές, που δημιουργούν δείκτες για τα εξαρτήματα/συστατικά στοιχεία του προγράμματος
  * Αναλυτές εξάρτησης, που βοηθούν τους συντηρητές να αναλύσουν και να κατανοήσουν την διάδραση μεταξύ των εξαρτημάτων του προγράμματος.

Τα εργαλεία αντίστροφης ανάπτυξης λογισμικού βοηθούν την διαδικασία δουλεύοντας ανάποδα, από το υπάρχον προϊόν για την δημιουργία αντικειμένων, όπως προδιαγραφές και περιγραφές σχεδιασμού, που μπορούν έπειτα να μεταφερθούν για να δημιουργήσουν ένα νέο προϊόν από ένα παλιό. Οι συντηρητές μπορούν επίσης να χρησιμοποιήσουν τον έλεγχο λογισμικού, την διαχείριση σχηματισμών λογισμικού, την τεκμηρίωση και εργαλεία μετρικών του λογισμικού.
